/**
 * JHipster Domain Language Specification
 */
 
grammar io.github.jhipster.jdl.dsl.JDL with org.eclipse.xtext.common.Terminals

generate jdl 'http://www.github.io/jhipster/jdl/dsl/JDL'

/* =========================================================================
 * ROOT ELEMENTS
 * ========================================================================= */

JdlDomainModel:
	features+=JdlFeature*;

JdlFeature:
	JdlEntity | JdlEnumType | JdlRelationships | JdlGenerationSetting;

/* =========================================================================
 * ENTITY
 * ========================================================================= */

JdlEntity:
	'entity' name=ID (tableName=JdlTableName)? ('{'
		(fields+=JdlEntityField (',' fields+=JdlEntityField)*)?
	'}')?;

JdlTableName:
	'(' name=ID ')';

JdlEntityField:
	name=ID type=JdlFieldType;

JdlFieldType:
	JdlEnumField | JdlStringField | JdlNumericField | JdlBooleanField | JdlDateField | JdlBlobField;

JdlEnumField returns JdlEntityField:
	enumType=[JdlEnumType] validators=JdlRequiredValidator?;

JdlStringField returns JdlEntityField:
	stringType?='String' validators=JdlStringValidators?;

JdlNumericField returns JdlEntityField:
	numericFieldType=NumericFieldType validators=JdlNumericValidators?;

enum NumericFieldType:
	Integer | Long | BigDecimal | Float | Double;

JdlBooleanField returns JdlEntityField:
	booleanType?='Boolean' validators=JdlRequiredValidator?;
	
JdlDateField returns JdlEntityField:
	(localDateType?='LocalDate' | zonedDateTimeType?='ZonedDateTime') validators=JdlRequiredValidator?;

JdlBlobField returns JdlFieldType:
	blobFieldType=JdlBlobFieldType validators=JdlBlobValidators?;

enum JdlBlobFieldType:
	Blob | AnyBlob | ImageBlob;

/* =========================================================================
 * VALIDATORS
 * ========================================================================= */

JdlStringValidators:
	(required=JdlRequiredValidator) (minLength=JdlMinLengthValidator)? 
	(maxlength=JdlMaxLengthValidator)? (pattern=JdlPatternValidator)?;

JdlNumericValidators:
	(required=JdlRequiredValidator) (minlength=JdlMinValidator)? (maxlength=JdlMaxValidator)?;

JdlBlobValidators:
	(required=JdlRequiredValidator) (minbytes=JdlMinBytesValidator)? (maxbytes=JdlMaxBytesValidator)?;

JdlRequiredValidator:
	required?='required';

JdlMinLengthValidator:
	'minlength' '(' value=INT ')';

JdlMaxLengthValidator:
	'maxlength' '(' value=INT ')';

JdlPatternValidator:
	'pattern' '(' value=STRING ')';

JdlMinValidator:
	'min' '(' value=INT ')';

JdlMaxValidator:
	'max' '(' value=INT ')';

JdlMinBytesValidator:
	'minbytes' '(' value=INT ')';

JdlMaxBytesValidator:
	'maxbytes' '(' value=INT ')';

/* =========================================================================
 * RELATIONSHIP
 * ========================================================================= */

JdlRelationships:
	'relationship' cardinality=JdlCardinality '{'
		relationships+=JdlRelationship* (',' relationships+=JdlRelationship)*
	'}';

JdlRelationship:
	fromEntity=[JdlEntity] fromName=JdlRelationshipName? 'to' toEntity=[JdlEntity] toName=JdlRelationshipName?;

JdlRelationshipName:
	'{' name=ID ('(' role=ID ')')? '}';

enum JdlCardinality:
	OneToMany | ManyToOne | OneToOne | ManyToMany;

/* =========================================================================
 * ENUM
 * ========================================================================= */

JdlEnumType:
	'enum' name=ID '{'
		values+=ID (',' values+=ID)*
	'}';

/* =========================================================================
 * GENERATION SETTING
 * ========================================================================= */

JdlGenerationSetting:
	setting=JdlGenerationSettingType (excludes=JdlEntityExclusion)?;

JdlGenerationSettingType:
	JdlServiceGenerationSetting | JdlMicroserviceGenerationSetting | JdlSearchGenerationSetting | 
	JdlDtoGenerationSetting | JdlPaginateGenerationSetting | JdlAngularSuffixGenerationSetting;

JdlServiceGenerationSetting returns JdlGenerationSetting:
	serviceGenerationSetting?='service' includes=JdlEntityInclusion serviceType=JdlServiceType;

JdlMicroserviceGenerationSetting returns JdlGenerationSetting:
	microserviceGenerationSetting?='microservice' includes=JdlEntityInclusion appname=ID;

JdlSearchGenerationSetting returns JdlGenerationSetting:
	searchGenerationSetting?='search' includes=JdlEntityInclusion service=ID;

JdlDtoGenerationSetting returns JdlGenerationSetting:
	dtoGenerationSetting?='dto' includes=JdlEntityInclusion dtoType=JdlDtoType;

JdlPaginateGenerationSetting returns JdlGenerationSetting:
	paginateGenerationSetting?='paginate' includes=JdlEntityInclusion paginateType=JdlPaginateType;

JdlAngularSuffixGenerationSetting returns JdlGenerationSetting:
	angularSuffixGenerationSetting?='angularSuffix' includes=JdlEntityInclusion id=ID;

JdlEntityInclusion:
	(predicate=JdlWildcardPredicate | entities+=[JdlEntity] (',' entities+=[JdlEntity])*)  'with';

JdlEntityExclusion:
	'except' entities+=[JdlEntity] (',' entities+=[JdlEntity])*;

JdlWildcardPredicate:
	wildcard?='*' | all?='all';

enum JdlServiceType:
	serviceClass | serviceImpl;

enum JdlDtoType:
	mapstruct;

JdlPaginateType:
	pagination?=('pager'|'pagination') | infiniteScroll?='infinite-scroll';

/* =========================================================================
 * END OF GRAMMAR
 * ========================================================================= */